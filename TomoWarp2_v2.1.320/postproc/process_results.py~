# -*- coding: utf-8 -*-
# 2013-08-22 - This test file is supposed to read in a finished, regular subpixel input, and output files.
# 2014-03-13 - Adding a median filter on the kinematics, from Pierre's suggestion

import numpy
import os, sys, time, getopt
sys.path.append(os.path.join(os.path.dirname(__file__), "../prior_field/"))
from layout_nodes import *
from regular_prior_interpolator import *
from prior_median_filter import kinematics_median_filter_fnc

sys.path.append(os.path.join(os.path.dirname(__file__), "../tools/"))
from tsv_tools import *
from vtk_tools import *
from calculate_node_spacing import *
from correct_pixel_size_changing import *
from cc_autothreshold import *
from print_help import *
from print_variable import *
from resampling_irregular_grid import *

sys.path.append(os.path.join(os.path.dirname(__file__), "../post_proc/"))
from regular_strain_small_strain import *
from regular_strain_large_strain import *
from tetrahedral_elements_strain import *


def process_results(  kinematics,                   \
                      DIR_out,                      \
                      prefix                    = "output",     \
                      cc_threshold              = None,         \
                      calculate_strain          = True,        \
                      kinematics_median_filter  = 0, \
                      pixel_size_ratio          = 1,         \
                      image_centre              = None,          \
                      strain_mode               = "largeStrains",\
                      saveDispl                 = True,          \
                      saveStrain                = [ False, False, False, False, False, False, True, True ],  \
                      saveTIFF                  = True,          \
                      saveRAW                   = False,         \
                      saveVTK                   = False ):
  
    # 2015-04-14 EA: Adding default option to save output files as tiff, which requires tifffile.py
    if saveTIFF:
      # tools already added to path
      import tifffile

    # Generate a mask for the output of the files.
    #   1. All nodes which have reported an error need to be masked.
    #   2. All nodes which have low CC can also be optionally masked.
    

    # Generate all fields replacing error Nodes with NaNs -- to read from kinematics array...
    # 2013-08-22 - Calculation of node spacing moved to ./tools/calculate_node_spacing.py
    nodes_z, nodes_y, nodes_x = calculate_node_spacing( kinematics[ :, 1:4 ] )

    cc_field = numpy.array( kinematics[ :, 7 ] ).astype( '<f4' )

    #-----------------------------------------------------------------------
    #-  Generate a NaN mask to add to other fields                        --
    #-----------------------------------------------------------------------
    mask = numpy.zeros_like( cc_field, dtype='<f4' )

    # add the nodes which are error nodes to the mask
    mask[ numpy.where( kinematics[ :, 8 ] != 0 ) ] = numpy.nan


    if cc_threshold == "auto":
        # if we have a cc_threshold set, add this to the mask
        cc_threshold = cc_autothreshold( cc_field )

    if cc_threshold == None:
        cc_threshold = -1.0 #why do we need this?
        
    else:
        # if cc_threshold != None, calculate and apply mask
        cc_threshold = float( cc_threshold )
        # ...and mask with cc_threshold
        mask[ numpy.where( cc_field < cc_threshold ) ] = numpy.nan


    #-----------------------------------------------------------------------
    #-  Done generating the mask...                                       --
    #-----------------------------------------------------------------------
    # Clean up the kinematics with the mask
    for i in [ 4,5,6 ]: kinematics[ :, i ] += mask

    # filter kinematics...
    if kinematics_median_filter != None:
      if kinematics_median_filter > 0:
          print "\tprocess_results: Applying a Kinematics Median filter of %0.1f (3 means Â±1)"%( kinematics_median_filter )
          try:
            kinematics[ :, 4:7 ] = kinematics_median_filter_fnc( kinematics[ :, 1:4 ], kinematics[ :, 4:7 ], kinematics_median_filter )
          except Exception as exc:
            print exc.message
            pass
          
    if pixel_size_ratio != 1:
      if image_centre is not None:
          kinematics = correct_pixel_size_changing( kinematics, pixel_size_ratio, image_centre )
      else:
          raise Exception('Image centre needed to correct pixel size ratio')
        
    print "  -> Writing output files to %s/%s..."%( DIR_out, prefix )

    # 2015-01-27 EA and ET: TODO: These could be optional one day...
    if saveTIFF:
      tifffile.imsave( DIR_out + "/%s-error-field-%04ix%04ix%04i.tif"%( prefix, len(nodes_x), len(nodes_y), len(nodes_z) ), kinematics[ :, 8 ].reshape( ( len(nodes_z), len(nodes_y), len(nodes_x) ) ).astype( '<f4' ) )
      tifffile.imsave( DIR_out +    "/%s-cc-field-%04ix%04ix%04i.tif"%( prefix, len(nodes_x), len(nodes_y), len(nodes_z)),            cc_field.reshape( ( len(nodes_z), len(nodes_y), len(nodes_x) ) ).astype( '<f4' ) )
      tifffile.imsave( DIR_out +        "/%s-mask-%04ix%04ix%04i.tif"%( prefix, len(nodes_x), len(nodes_y), len(nodes_z)),                mask.reshape( ( len(nodes_z), len(nodes_y), len(nodes_x) ) ).astype( '<f4' ) )
    if saveRAW:
      # Save RAW Files
      kinematics[ :, 8 ].astype( '<f4' ).tofile( DIR_out + "/%s-error-field-%04ix%04ix%04i.raw"%( prefix, len(nodes_x), len(nodes_y), len(nodes_z)) )
      cc_field.astype( '<f4' ).tofile(           DIR_out + "/%s-cc-field-%04ix%04ix%04i.raw"%( prefix, len(nodes_x), len(nodes_y), len(nodes_z)) )
      mask.astype( '<f4' ).tofile(               DIR_out + "/%s-mask-%04ix%04ix%04i.raw"%( prefix, len(nodes_x), len(nodes_y), len(nodes_z)) )
    if saveVTK:
      #print "\tprocess_results:VTK output not implemented yet"
      headersEndPosition = WriteVTK_headers( DIR_out + "/%s.vtk"%( prefix ), kinematics[ :, 1:4 ], mask )
      WriteVTK_data( DIR_out + "/%s.vtk"%( prefix ), 'correlation_coefficient', cc_field,          mask, 'POINT_DATA' )
      
      WriteVTK_headers( DIR_out + "/%s_errors.vtk"%( prefix ), kinematics[ :, 1:4 ] )
      WriteVTK_data( DIR_out + "/%s_errors.vtk"%( prefix ), 'error'                  , kinematics[ :, 8 ], [], 'POINT_DATA')

    if saveDispl:
      if saveTIFF:
        tifffile.imsave( DIR_out + "/%s-z-field-%04ix%04ix%04i.tif"%(  prefix, len(nodes_x), len(nodes_y), len(nodes_z)),     kinematics[ :, 4 ].reshape( ( len(nodes_z), len(nodes_y), len(nodes_x) ) ).astype( '<f4' ) )
        tifffile.imsave( DIR_out + "/%s-y-field-%04ix%04ix%04i.tif"%(  prefix, len(nodes_x), len(nodes_y), len(nodes_z)),     kinematics[ :, 5 ].reshape( ( len(nodes_z), len(nodes_y), len(nodes_x) ) ).astype( '<f4' ) )
        tifffile.imsave( DIR_out + "/%s-x-field-%04ix%04ix%04i.tif"%(  prefix, len(nodes_x), len(nodes_y), len(nodes_z)),     kinematics[ :, 6 ].reshape( ( len(nodes_z), len(nodes_y), len(nodes_x) ) ).astype( '<f4' ) )
      if saveRAW:
        # Save RAW Files
        kinematics[ :, 4 ].astype( '<f4' ).tofile( DIR_out + "/%s-z-field-%04ix%04ix%04i.raw"%(  prefix, len(nodes_x), len(nodes_y), len(nodes_z)) )
        kinematics[ :, 5 ].astype( '<f4' ).tofile( DIR_out + "/%s-y-field-%04ix%04ix%04i.raw"%(  prefix, len(nodes_x), len(nodes_y), len(nodes_z)) )
        kinematics[ :, 6 ].astype( '<f4' ).tofile( DIR_out + "/%s-x-field-%04ix%04ix%04i.raw"%(  prefix, len(nodes_x), len(nodes_y), len(nodes_z)) )
      if saveVTK:
        #print "\tprocess_results:VTK output not implemented yet"
        WriteVTK_data( DIR_out + "/%s.vtk"%( prefix ), 'Displacements', kinematics[ :, 4:7 ], mask)


    if calculate_strain:
          #try:
              if    strain_mode == "smallStrains":
                  [ strain, rot ] = regular_strain_small_strain( kinematics[:,1:4], kinematics[:,4:7] )
                  if saveVTK:
                    # resample strain in a regular grid - not implemented yet
                    print "WARNING: saving VTK with mode smallStrains is not implemented yet"
                    saveVTK = False

              elif  strain_mode == "largeStrains":
                  [ strain, rot ] = regular_strain_large_strain( kinematics[:,1:4], kinematics[:,4:7] )
                  if saveVTK:
                    # resample strain in a regular grid - not implemented yet
                    print "WARNING: saving VTK with mode largeStrains is not implemented yet"
                    saveVTK = False
                  
              elif  strain_mode == "tetrahedralStrains":
                  [ strain, rot, connectivity, coordinates ] = tetrahedral_elements_strain( kinematics[:,1:4], kinematics[:,4:7], mask = mask )

                  print "max strain = ", strain.max()
                  print "coordinates.shape = ",coordinates.shape
                  if saveTIFF or saveRAW:
                    # resample strain in a regular grid - not implemented yet
                    print "WARNING: saving TIFF or RAW with mode tetrahedralStrains is not implemented yet"
                    saveTIFF = False
                    saveRAW = False

              strain = strain.astype( '<f4' )
              rot    = rot.astype(    '<f4' )

              ## Extract strain tensor components
              if len(strain.shape) == 5 :
                  zz = numpy.array( strain[ :, :, :, 0, 0 ] )
                  zy = numpy.array( strain[ :, :, :, 0, 1 ] )
                  zx = numpy.array( strain[ :, :, :, 0, 2 ] )
                  yy = numpy.array( strain[ :, :, :, 1, 1 ] )
                  yx = numpy.array( strain[ :, :, :, 1, 2 ] )
                  xx = numpy.array( strain[ :, :, :, 2, 2 ] )
                  dimZ = strain.shape[0]
                  dimY = strain.shape[1]
                  dimX = strain.shape[2]
              elif len(strain.shape) == 3 :
                  zz = numpy.array( strain[ :, 0, 0 ] )
                  zy = numpy.array( strain[ :, 0, 1 ] )
                  zx = numpy.array( strain[ :, 0, 2 ] )
                  yy = numpy.array( strain[ :, 1, 1 ] )
                  yx = numpy.array( strain[ :, 1, 2 ] )
                  xx = numpy.array( strain[ :, 2, 2 ] )


              if saveTIFF:

                if len(strain.shape) == 3 :
                    zz = resampling_irregular_grid( zz, coordinates )
                    zy = resampling_irregular_grid( zy, coordinates )
                    zx = resampling_irregular_grid( zx, coordinates )
                    yy = resampling_irregular_grid( yy, coordinates )
                    yx = resampling_irregular_grid( yx, coordinates )
                    xx = resampling_irregular_grid( xx, coordinates )
                    dimZ = zz.shape[0]
                    dimY = zz.shape[1]
                    dimX = zz.shape[2]
                    #print "Warning: Strain not in a regular grid. Can not write TIFF"
                if saveStrain[0]: tifffile.imsave( DIR_out + "/%s-strain_zz-field-%04ix%04ix%04i.tif"%( prefix, dimX, dimY, dimZ), zz.astype( '<f4' ) )
                if saveStrain[1]: tifffile.imsave( DIR_out + "/%s-strain_zy-field-%04ix%04ix%04i.tif"%( prefix, dimX, dimY, dimZ), zy.astype( '<f4' ) )
                if saveStrain[2]: tifffile.imsave( DIR_out + "/%s-strain_zx-field-%04ix%04ix%04i.tif"%( prefix, dimX, dimY, dimZ), zx.astype( '<f4' ) )
                if saveStrain[3]: tifffile.imsave( DIR_out + "/%s-strain_yy-field-%04ix%04ix%04i.tif"%( prefix, dimX, dimY, dimZ), yy.astype( '<f4' ) )
                if saveStrain[4]: tifffile.imsave( DIR_out + "/%s-strain_yx-field-%04ix%04ix%04i.tif"%( prefix, dimX, dimY, dimZ), yx.astype( '<f4' ) )
                if saveStrain[5]: tifffile.imsave( DIR_out + "/%s-strain_xx-field-%04ix%04ix%04i.tif"%( prefix, dimX, dimY, dimZ), xx.astype( '<f4' ) )

              if saveRAW:
                # Save RAW Files
                if len(strain.shape) == 3 :
                    zz = resampling_irregular_grid( zz, coordinates )
                    zy = resampling_irregular_grid( zy, coordinates )
                    zx = resampling_irregular_grid( zx, coordinates )
                    yy = resampling_irregular_grid( yy, coordinates )
                    yx = resampling_irregular_grid( yx, coordinates )
                    xx = resampling_irregular_grid( xx, coordinates )
                    dimZ = zz.shape[0]
                    dimY = zz.shape[1]
                    dimX = zz.shape[2]
                if saveStrain[0]: zz.astype( '<f4' ).tofile( DIR_out + "/%s-strain_zz-field-%04ix%04ix%04i.raw"%( prefix, dimX, dimY, dimZ) )
                if saveStrain[1]: zy.astype( '<f4' ).tofile( DIR_out + "/%s-strain_zy-field-%04ix%04ix%04i.raw"%( prefix, dimX, dimY, dimZ) )
                if saveStrain[2]: zx.astype( '<f4' ).tofile( DIR_out + "/%s-strain_zx-field-%04ix%04ix%04i.raw"%( prefix, dimX, dimY, dimZ) )
                if saveStrain[3]: yy.astype( '<f4' ).tofile( DIR_out + "/%s-strain_yy-field-%04ix%04ix%04i.raw"%( prefix, dimX, dimY, dimZ) )
                if saveStrain[4]: yx.astype( '<f4' ).tofile( DIR_out + "/%s-strain_yx-field-%04ix%04ix%04i.raw"%( prefix, dimX, dimY, dimZ) )
                if saveStrain[5]: xx.astype( '<f4' ).tofile( DIR_out + "/%s-strain_xx-field-%04ix%04ix%04i.raw"%( prefix, dimX, dimY, dimZ) )
                    
              if saveVTK:
                #print "\tprocess_results:VTK output not implemented yet"
                WriteVTK_maesh( DIR_out + "/%s.vtk"%( prefix ), connectivity, headersEndPosition )
                WriteVTK_data( DIR_out + "/%s.vtk"%( prefix ), '', [], data_type = 'CELL_DATA', nPoints = len( connectivity ) )
                if saveStrain[0]: WriteVTK_data( DIR_out + "/%s.vtk"%( prefix ), 'strain_zz', zz )
                if saveStrain[1]: WriteVTK_data( DIR_out + "/%s.vtk"%( prefix ), 'strain_zy', zy )
                if saveStrain[2]: WriteVTK_data( DIR_out + "/%s.vtk"%( prefix ), 'strain_zx', zx )
                if saveStrain[3]: WriteVTK_data( DIR_out + "/%s.vtk"%( prefix ), 'strain_yy', yy )
                if saveStrain[4]: WriteVTK_data( DIR_out + "/%s.vtk"%( prefix ), 'strain_yx', yx )
                if saveStrain[5]: WriteVTK_data( DIR_out + "/%s.vtk"%( prefix ), 'strain_xx', xx )

              if saveStrain[6]:
                
                # Volumetric Strain is the trace
                volumetric_strain     = zz + yy + xx

                if saveTIFF:
                  tifffile.imsave( DIR_out + "/%s-vol_strain-field-%04ix%04ix%04i.tif"%( prefix, dimX, dimY, dimZ), volumetric_strain.astype( '<f4' ) )
                if saveRAW:
                  # Save RAW Files
                  volumetric_strain.astype( '<f4' ).tofile( DIR_out + "/%s-vol_strain-field-%04ix%04ix%04i.raw"%( prefix, dimX, dimY, dimZ) )
                if saveVTK:
                  #print "\tprocess_results:VTK output not implemented yet"
                  WriteVTK_data( DIR_out + "/%s.vtk"%( prefix ), 'vol_strain', volumetric_strain )

                  
              if saveStrain[7]:

                # Steve's Maximum Shear Strain, see: Ando (2013) Phd, and Hall et al. 2009
                maximum_shear_strain  = ( 1/3.0 ) * numpy.sqrt( 2*( xx-yy )**2  +  2*(xx-zz)**2  +  2*(yy-zz)**2 + \
                                                                3*yx**2         +  3*zx**2       +  3*zy**2 )
                if saveTIFF:
                  tifffile.imsave( DIR_out + "/%s-maximum_shear_strain-field-%04ix%04ix%04i.tif"%( prefix, dimX, dimY, dimZ), maximum_shear_strain.astype( '<f4' ) )
                if saveRAW:
                  # Save RAW Files
                  maximum_shear_strain.astype( '<f4' ).tofile( DIR_out + "/%s-max_shear-field-%04ix%04ix%04i.raw"%( prefix, dimX, dimY, dimZ) )
                if saveVTK:
                  #print "\tprocess_results:VTK output not implemented yet"
                  WriteVTK_data( DIR_out + "/%s.vtk"%( prefix ), 'max_shear', maximum_shear_strain )

              # 2014-10-13 EA: calculation of rotation
              if len(strain.shape) == 5 :
                  R33 = numpy.array( rot[ :, :, :, 0, 0 ] )
                  R32 = numpy.array( rot[ :, :, :, 0, 1 ] )
                  R31 = numpy.array( rot[ :, :, :, 0, 2 ] )
                  R22 = numpy.array( rot[ :, :, :, 1, 1 ] )
                  R21 = numpy.array( rot[ :, :, :, 1, 2 ] )
                  R11 = numpy.array( rot[ :, :, :, 2, 2 ] )
              elif len(strain.shape) == 3 :
                  R33 = numpy.array( rot[ :, 0, 0 ] )
                  R32 = numpy.array( rot[ :, 0, 1 ] )
                  R31 = numpy.array( rot[ :, 0, 2 ] )
                  R22 = numpy.array( rot[ :, 1, 1 ] )
                  R21 = numpy.array( rot[ :, 1, 2 ] )
                  R11 = numpy.array( rot[ :, 2, 2 ] )

              RotAngle = numpy.sqrt( R32**2 + R31**2 + R21**2 )
              
              if saveTIFF:
                if len(strain.shape) == 5 :
                    tifffile.imsave( DIR_out + "/%s-rot_angle-%04ix%04ix%04i.tif"%( prefix, dimX, dimY, dimZ), RotAngle.astype( '<f4' ) )
                else:
                    print "Warning: Strain not in a regular grid. Can not write TIFF"
              if saveRAW:
                # Save RAW Files
                if len(strain.shape) == 5 :
                    RotAngle.astype( '<f4' ).tofile( DIR_out + "/%s-rot_angle-%04ix%04ix%04i.raw"%( prefix, dimX, dimY, dimZ) )
                else:
                    print "Warning: Strain not in a regular grid. Can not write RAW"
              if saveVTK:
                #print "\tprocess_results:VTK output not implemented yet"
                #WriteVTK_data( DIR_out + "/%s.vtk"%( prefix ), 'rot_angle', RotAngle )
                pass
              
              
          #except Exception as exc:
              #print exc
              #pass